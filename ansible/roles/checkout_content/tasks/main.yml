# we first do a git pull and clear content to be sure we don't get any merge conflicts

- name: define collection_dir variables ending on slash
  set_fact:
    collection_dir_st: "{{ php_dir }}/content/collections/"
    collection_dir_repo: "{{ content.srcdir }}/{{ repo.name }}/content"

- name: show collection dir
  debug:
    var: "{{ item }}"
  loop:
    - collection_dir_st
    - collection_dir_repo

- name: git pull
  become: true
  ansible.builtin.command:
    chdir: "{{ content.srcdir }}/{{ repo.name }}"
    cmd: git pull origin {{ repo_branch }}

- name: clear articles + pages on git repo (so we remove deleted items)
  become: true
  ansible.builtin.shell:
    chdir: "{{ collection_dir_repo }}"
    cmd: rm -rf {{ item }}/*
  loop: "{{ content.collections }}"

- name: copy articles and pages from statamic to local git repo
  become: true
  ansible.builtin.command:
    chdir: "{{ collection_dir_repo }}"
    cmd: "cp -r {{ collection_dir_st }}{{item }} . "
  loop: "{{ content.collections }}"

- name: stage changes locally  
  ansible.builtin.command:
    cmd: git add *
    chdir: "{{ content.srcdir }}/{{ repo.name }}"

- name: commit changes locally in build dir to local git repo
  ansible.builtin.command:
    cmd: git commit -m "updated content by {{ user }}"
    chdir: "{{ content.srcdir }}/{{ repo.name }}"

- name: push changes to remote repo
  ansible.builtin.command:
    cmd: git push --set-upstream origin {{ repo_branch }}
    chdir: "{{ content.srcdir }}/{{ repo.name }}" 

